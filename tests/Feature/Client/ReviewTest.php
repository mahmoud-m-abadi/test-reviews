<?php

namespace Tests\Feature\Client;

use App\Interfaces\Models\ProductInterface;
use App\Interfaces\Models\ReviewCommentInterface;
use App\Interfaces\Models\ReviewVoteInterface;
use App\Interfaces\Models\UserInterface;
use App\Models\Product;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Response;
use Tests\TestCase;

class ReviewTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    private ProductInterface $product;
    private UserInterface $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->product = Product::factory()->create([
            ProductInterface::PUBLISHED => true,
            ProductInterface::ENABLE_REVIEW_FOR_BUYER => false,
            ProductInterface::ENABLE_COMMENT => true,
            ProductInterface::ENABLE_VOTE => true,
        ]);
        $this->user = User::factory()->create();
    }

    /** Comment */
    public function test_user_can_add_review_comment_for_a_product()
    {
        $this->actingAs($this->user);

        $this->postJson(
            route('reviews.clientAddReviewComment', $this->product),
            $this->makeReviewCommentData()
        )
            ->assertCreated();
    }

    public function test_user_can_not_add_review_comment_for_not_published_product()
    {
        $product = Product::factory()->create([
            ProductInterface::PUBLISHED => false,
            ProductInterface::ENABLE_REVIEW_FOR_BUYER => false,
            ProductInterface::ENABLE_COMMENT => true,
        ]);
        $this->actingAs($this->user);

        $this->postJson(
            route('reviews.clientAddReviewComment', $product),
            $this->makeReviewCommentData()
        )
            ->assertNotFound();
    }

    /**
     * @dataProvider makeInvalidDataForReviewComment
     */
    public function test_user_can_not_add_review_comment_in_invalid_data($invalidData)
    {
        $product = Product::factory()->create([
            ProductInterface::PUBLISHED => false,
            ProductInterface::ENABLE_REVIEW_FOR_BUYER => false,
            ProductInterface::ENABLE_COMMENT => true,
        ]);
        $this->actingAs($this->user);

        [$ruleName, $payload] = $invalidData();

        $this->postJson(
            route('reviews.clientAddReviewComment', $product),
            $payload
        )
            ->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
    }

    public function makeInvalidDataForReviewComment()
    {
        return [
            'it fails if title is empty' => [
                function () {
                    return [
                        ReviewCommentInterface::TITLE,
                        array_merge($this->makeReviewCommentData(), [ReviewCommentInterface::TITLE => null])
                    ];
                }
            ],
            'it fails if body is empty' => [
                function () {
                    return [
                        ReviewCommentInterface::BODY,
                        array_merge($this->makeReviewCommentData(), [ReviewCommentInterface::BODY => null])
                    ];
                }
            ],
            'it fails if title less than 3 characters' => [
                function () {
                    return [
                        ReviewCommentInterface::TITLE,
                        array_merge($this->makeReviewCommentData(), [ReviewCommentInterface::TITLE => 'Hi'])
                    ];
                }
            ],
            'it fails if body less than 3 characters' => [
                function () {
                    return [
                        ReviewCommentInterface::BODY,
                        array_merge($this->makeReviewCommentData(), [ReviewCommentInterface::BODY => 'Bo'])
                    ];
                }
            ],
        ];
    }

    private function makeReviewCommentData() {
        return [
            ReviewCommentInterface::TITLE => 'This is a test for title',
            ReviewCommentInterface::BODY =>'This is a test for body',
        ];
    }

    /** Vote */
    public function test_user_can_add_review_vote_for_a_product()
    {
        $this->actingAs($this->user);

        $this->postJson(
            route('reviews.clientAddReviewVote', $this->product),
            $this->makeReviewVoteData()
        )
            ->assertCreated();
    }

    public function test_user_can_not_add_review_vote_for_not_published_product()
    {
        $product = Product::factory()->create([
            ProductInterface::PUBLISHED => false,
            ProductInterface::ENABLE_REVIEW_FOR_BUYER => false,
            ProductInterface::ENABLE_VOTE => true,
        ]);
        $this->actingAs($this->user);

        $this->postJson(
            route('reviews.clientAddReviewVote', $product),
            $this->makeReviewVoteData()
        )
            ->assertNotFound();
    }

    /**
     * @dataProvider makeInvalidDataForReviewVote
     */
    public function test_user_can_not_add_review_vote_in_invalid_data($invalidData)
    {
        $product = Product::factory()->create([
            ProductInterface::PUBLISHED => false,
            ProductInterface::ENABLE_REVIEW_FOR_BUYER => false,
            ProductInterface::ENABLE_VOTE => true,
        ]);
        $this->actingAs($this->user);

        [$ruleName, $payload] = $invalidData();

        $this->postJson(
            route('reviews.clientAddReviewVote', $product),
            $payload
        )
            ->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
    }

    public function makeInvalidDataForReviewVote()
    {
        return [
            'it fails if rating is empty' => [
                function () {
                    return [
                        ReviewVoteInterface::RATING,
                        array_merge($this->makeReviewVoteData(), [ReviewVoteInterface::RATING => null])
                    ];
                }
            ],
            'it fails if rating is less than 1' => [
                function () {
                    return [
                        ReviewVoteInterface::RATING,
                        array_merge($this->makeReviewVoteData(), [ReviewVoteInterface::RATING => 0])
                    ];
                }
            ],
            'it fails if rating more than 5' => [
                function () {
                    return [
                        ReviewVoteInterface::RATING,
                        array_merge($this->makeReviewVoteData(), [ReviewVoteInterface::RATING => 'Hi'])
                    ];
                }
            ],
        ];
    }

    private function makeReviewVoteData() {
        return [
            ReviewVoteInterface::RATING => 3,
        ];
    }
}
