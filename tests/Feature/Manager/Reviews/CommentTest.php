<?php

namespace Tests\Feature\Manager\Reviews;

use App\Interfaces\Models\ReviewCommentInterface;
use App\Interfaces\Models\UserInterface;
use App\Models\Review\ReviewComment;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Response;
use Tests\TestCase;

class CommentTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var UserInterface
     */
    private UserInterface $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->actingAs($this->user);
    }

    /** Publish */
    public function test_manager_can_see_all_comments()
    {
        ReviewComment::factory(10)->create();

        $this->getJson(route('review-comments.index'))
            ->assertJsonCount(10, 'data');
    }

    public function test_manager_can_approve_a_review_comment_successfully()
    {
        $reviewComment = ReviewComment::factory()->create([
            ReviewCommentInterface::APPROVED => false
        ]);

        $this->putJson(route('reviews.comments.approve', $reviewComment), [
            ReviewCommentInterface::APPROVED => true
        ])
            ->assertSuccessful()
            ->assertNoContent();

        $this->assertDatabaseHas(ReviewCommentInterface::TABLE, [
            ReviewCommentInterface::ID => $reviewComment->getId(),
            ReviewCommentInterface::APPROVED => true,
        ]);
    }

    public function test_manager_can_unapprove_a_review_comment_successfully()
    {
        $reviewComment = ReviewComment::factory()->create([
            ReviewCommentInterface::APPROVED => true
        ]);

        $this->putJson(route('reviews.comments.approve', $reviewComment), [
            ReviewCommentInterface::APPROVED => false
        ])
            ->assertSuccessful()
            ->assertNoContent();

        $this->assertDatabaseHas(ReviewCommentInterface::TABLE, [
            ReviewCommentInterface::ID => $reviewComment->getId(),
            ReviewCommentInterface::APPROVED => false,
        ]);
    }

    /**
     * @dataProvider reviewCommentApproveInvalidData
     */
    public function test_manager_can_not_approve_a_review_comment_with_invalid_data($invalidData)
    {
        $reviewComment = ReviewComment::factory()->create();

        [$ruleName, $payload] = $invalidData();

        $this->putJson(route('reviews.comments.approve', $reviewComment), $payload)
            ->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
    }

    public function reviewCommentApproveInvalidData()
    {
        return [
            'it fails if review approved field is empty' => [
                function () {
                    return [
                        ReviewCommentInterface::APPROVED,
                        [ReviewCommentInterface::APPROVED => null]
                    ];
                }
            ],
            'it fails if review approved field not be boolean' => [
                function () {
                    return [
                        ReviewCommentInterface::APPROVED,
                        [ReviewCommentInterface::APPROVED => 123]
                    ];
                }
            ]
        ];
    }
}
