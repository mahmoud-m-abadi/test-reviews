<?php

namespace Tests\Feature\Manager;

use App\Interfaces\Models\ProductInterface;
use App\Interfaces\Models\UserInterface;
use App\Models\Product;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Response;
use Tests\TestCase;

class ProductTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var UserInterface
     */
    private UserInterface $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->actingAs($this->user);
    }

    /** Publish */
    public function test_manager_can_see_all_products()
    {
        Product::factory(10)->create();

        $this->getJson(route('products.index'))
            ->assertJsonCount(10, 'data');
    }

    public function test_manager_can_see_a_product()
    {
        $product = Product::factory()->create();

        $this->getJson(route('products.show', $product))
            ->assertSuccessful()
            ->assertJsonPath('data.name', $product->getName());
    }

    public function test_manager_can_publish_a_product()
    {
        $product = Product::factory()->create([
            ProductInterface::PUBLISHED => false
        ]);

        $this->putJson(route('products.publish', $product), [
            ProductInterface::PUBLISHED => true
        ])
            ->assertSuccessful()
            ->assertNoContent();

        $this->assertDatabaseHas(ProductInterface::TABLE, [
            ProductInterface::ID => $product->getId(),
            ProductInterface::PUBLISHED => true,
        ]);
    }

    public function test_manager_can_hide_or_not_publish_a_product()
    {
        $product = Product::factory()->create([
            ProductInterface::PUBLISHED => true
        ]);

        $this->putJson(route('products.publish', $product), [
            ProductInterface::PUBLISHED => false
        ])
            ->assertSuccessful()
            ->assertNoContent();

        $this->assertDatabaseHas(ProductInterface::TABLE, [
            ProductInterface::ID => $product->getId(),
            ProductInterface::PUBLISHED => false,
        ]);
    }

    /**
     * @dataProvider productPublishInvalidData
     */
    public function test_manager_can_not_publish_a_product_with_invalid_data($invalidData)
    {
        $product = Product::factory()->create();

        [$ruleName, $payload] = $invalidData();

        $this->putJson(route('products.publish', $product), $payload)
            ->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
    }

    public function productPublishInvalidData()
    {
        return [
            'it fails if published field is empty' => [
                function () {
                    return [
                        ProductInterface::PUBLISHED,
                        [ProductInterface::PUBLISHED => null]
                    ];
                }
            ],
            'it fails if published field not be boolean' => [
                function () {
                    return [
                        ProductInterface::PUBLISHED,
                        [ProductInterface::PUBLISHED => 123]
                    ];
                }
            ]
        ];
    }

    /** Enable Comment */
    public function test_manager_can_enable_comment_for_a_product()
    {
        $product = Product::factory()->create([
            ProductInterface::ENABLE_COMMENT => false
        ]);

        $this->putJson(route('products.enableComment', $product), [
            ProductInterface::ENABLE_COMMENT => true
        ])
            ->assertSuccessful()
            ->assertNoContent();

        $this->assertDatabaseHas(ProductInterface::TABLE, [
            ProductInterface::ID => $product->getId(),
            ProductInterface::ENABLE_COMMENT => true,
        ]);
    }

    public function test_manager_can_disable_comment_for_a_product()
    {
        $product = Product::factory()->create([
            ProductInterface::ENABLE_COMMENT => true
        ]);

        $this->putJson(route('products.enableComment', $product), [
            ProductInterface::ENABLE_COMMENT => false
        ])
            ->assertSuccessful()
            ->assertNoContent();

        $this->assertDatabaseHas(ProductInterface::TABLE, [
            ProductInterface::ID => $product->getId(),
            ProductInterface::ENABLE_COMMENT => false,
        ]);
    }

    /**
     * @dataProvider productEnableCommentInvalidData
     */
    public function test_manager_can_not_enable_comment_for_a_product_with_invalid_data($invalidData)
    {
        $product = Product::factory()->create();

        [$ruleName, $payload] = $invalidData();

        $this->putJson(route('products.enableComment', $product), $payload)
            ->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
    }

    public function productEnableCommentInvalidData()
    {
        return [
            'it fails if enable comment field is empty' => [
                function () {
                    return [
                        ProductInterface::ENABLE_COMMENT,
                        [ProductInterface::ENABLE_COMMENT => null]
                    ];
                }
            ],
            'it fails if enable comment field not be boolean' => [
                function () {
                    return [
                        ProductInterface::ENABLE_COMMENT,
                        [ProductInterface::ENABLE_COMMENT => 123]
                    ];
                }
            ]
        ];
    }

    /** Enable Vote */
    public function test_manager_can_enable_vote_for_a_product()
    {
        $product = Product::factory()->create([
            ProductInterface::ENABLE_VOTE => false
        ]);

        $this->putJson(route('products.enableVote', $product), [
            ProductInterface::ENABLE_VOTE => true
        ])
            ->assertSuccessful()
            ->assertNoContent();

        $this->assertDatabaseHas(ProductInterface::TABLE, [
            ProductInterface::ID => $product->getId(),
            ProductInterface::ENABLE_VOTE => true,
        ]);
    }

    public function test_manager_can_disable_vote_for_a_product()
    {
        $product = Product::factory()->create([
            ProductInterface::ENABLE_VOTE => true
        ]);

        $this->putJson(route('products.enableVote', $product), [
            ProductInterface::ENABLE_VOTE => false
        ])
            ->assertSuccessful()
            ->assertNoContent();

        $this->assertDatabaseHas(ProductInterface::TABLE, [
            ProductInterface::ID => $product->getId(),
            ProductInterface::ENABLE_VOTE => false,
        ]);
    }

    /**
     * @dataProvider productEnableVoteInvalidData
     */
    public function test_manager_can_not_enable_vote_for_a_product_with_invalid_data($invalidData)
    {
        $product = Product::factory()->create();

        [$ruleName, $payload] = $invalidData();

        $this->putJson(route('products.enableVote', $product), $payload)
            ->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
    }

    public function productEnableVoteInvalidData()
    {
        return [
            'it fails if enable vote field is empty' => [
                function () {
                    return [
                        ProductInterface::ENABLE_VOTE,
                        [ProductInterface::ENABLE_VOTE => null]
                    ];
                }
            ],
            'it fails if enable vote field not be boolean' => [
                function () {
                    return [
                        ProductInterface::ENABLE_VOTE,
                        [ProductInterface::ENABLE_VOTE => 123]
                    ];
                }
            ]
        ];
    }

    /** Enable Review For Buyer */
    public function test_manager_can_enable_review_for_buyer_for_a_product()
    {
        $product = Product::factory()->create([
            ProductInterface::ENABLE_REVIEW_FOR_BUYER => false
        ]);

        $this->putJson(route('products.enableReviewForBuyer', $product), [
            ProductInterface::ENABLE_REVIEW_FOR_BUYER => true
        ])
            ->assertSuccessful()
            ->assertNoContent();

        $this->assertDatabaseHas(ProductInterface::TABLE, [
            ProductInterface::ID => $product->getId(),
            ProductInterface::ENABLE_REVIEW_FOR_BUYER => true,
        ]);
    }

    public function test_manager_can_disable_review_for_buyer_for_a_product()
    {
        $product = Product::factory()->create([
            ProductInterface::ENABLE_REVIEW_FOR_BUYER => true
        ]);

        $this->putJson(route('products.enableReviewForBuyer', $product), [
            ProductInterface::ENABLE_REVIEW_FOR_BUYER => false
        ])
            ->assertSuccessful()
            ->assertNoContent();

        $this->assertDatabaseHas(ProductInterface::TABLE, [
            ProductInterface::ID => $product->getId(),
            ProductInterface::ENABLE_REVIEW_FOR_BUYER => false,
        ]);
    }

    /**
     * @dataProvider productEnableReviewForBuyerInvalidData
     */
    public function test_manager_can_not_enable_review_for_buyer_for_a_product_with_invalid_data($invalidData)
    {
        $product = Product::factory()->create();

        [$ruleName, $payload] = $invalidData();

        $this->putJson(route('products.enableReviewForBuyer', $product), $payload)
            ->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
    }

    public function productEnableReviewForBuyerInvalidData()
    {
        return [
            'it fails if enable vote field is empty' => [
                function () {
                    return [
                        ProductInterface::ENABLE_REVIEW_FOR_BUYER,
                        [ProductInterface::ENABLE_REVIEW_FOR_BUYER => null]
                    ];
                }
            ],
            'it fails if enable vote field not be boolean' => [
                function () {
                    return [
                        ProductInterface::ENABLE_REVIEW_FOR_BUYER,
                        [ProductInterface::ENABLE_REVIEW_FOR_BUYER => 123]
                    ];
                }
            ]
        ];
    }
}
